// Generated by CoffeeScript 1.7.1
var Api, Application, ConfigManager, Corridor, fs, path, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

path = require('path');

fs = require('fs');

_ = require('underscore');

ConfigManager = require('../ConfigManager');

Application = require('./Application');

Corridor = require('./Corridor');

Api = (function() {
  function Api() {}

  Api.connector = require('../postgresConnector');

  Api.getApplications = function(callback) {
    if (callback == null) {
      throw 'bad arguments';
    }
    return ConfigManager.getConfig((function(_this) {
      return function(config) {
        var app, objectApps, _i, _len, _ref, _ref1;
        if (config.limitDataToConfigSpecifiedList === true && ((_ref = config.apps) != null ? _ref.length : void 0) > 0) {
          objectApps = [];
          _ref1 = config.apps;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            app = _ref1[_i];
            objectApps.push(new Application(app, 'config'));
          }
          return callback(objectApps);
        } else {
          return _this.connector.getApplications(function(dbApps) {
            var apps, _j, _len1;
            apps = _.union(config.apps, dbApps).sort();
            objectApps = [];
            for (_j = 0, _len1 = apps.length; _j < _len1; _j++) {
              app = apps[_j];
              if (__indexOf.call(config.apps, app) >= 0) {
                objectApps.push(new Application(app, 'config'));
              } else {
                objectApps.push(new Application(app, 'db'));
              }
            }
            return callback(objectApps);
          });
        }
      };
    })(this));
  };

  Api.addApplication = function(app, callback) {
    if ((app == null) || typeof app !== 'string') {
      throw 'bad arguments: expected \'app\' <string>';
    }
    if (callback == null) {
      throw 'bad arguments: callback expected';
    }
    app = new Application(app, 'config');
    return ConfigManager.getConfig(function(config) {
      config.apps = _.union(config.apps, [app.name]);
      return ConfigManager.saveConfig(config, function(err) {
        if (err != null) {
          console.log(err);
        }
        return callback();
      });
    });
  };

  Api.deleteApplication = function(app, callback) {
    if ((app == null) || typeof app !== 'string') {
      throw 'bad arguments: expected \'app\' <string>';
    }
    if (callback == null) {
      throw 'bad arguments: callback expected';
    }
    app = new Application(app, 'config');
    return ConfigManager.getConfig(function(config) {
      config.apps = _.reject(config.apps, function(item) {
        return item === app.name;
      });
      return ConfigManager.saveConfig(config, function(err) {
        if (err != null) {
          console.log(err);
        }
        return callback();
      });
    });
  };

  Api.getCorridors = function(callback) {
    if (callback == null) {
      throw 'bad arguments';
    }
    return ConfigManager.getConfig(function(config) {
      var corridor, objectCorridor, _i, _len, _ref, _ref1;
      if (config.limitDataToConfigSpecifiedList === true && ((_ref = config.corridors) != null ? _ref.length : void 0) > 0) {
        objectCorridor = [];
        _ref1 = config.corridors;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          corridor = _ref1[_i];
          objectCorridor.push(new Corridor(corridor, 'config'));
        }
        return callback(objectCorridor);
      } else {
        return Api.connector.getCorridors(function(dbCorridors) {
          var corridors, _j, _len1;
          corridors = _.union(config.corridors, dbCorridors).sort();
          objectCorridor = [];
          for (_j = 0, _len1 = corridors.length; _j < _len1; _j++) {
            corridor = corridors[_j];
            if (__indexOf.call(config.corridors, corridor) >= 0) {
              objectCorridor.push(new Corridor(corridor, 'config'));
            } else {
              objectCorridor.push(new Corridor(corridor, 'db'));
            }
          }
          return callback(objectCorridor);
        });
      }
    });
  };

  Api.addCorridor = function(corridor, callback) {
    if ((corridor == null) || typeof corridor !== 'string') {
      throw 'bad arguments: expected \'corridor\' <string>';
    }
    if (callback == null) {
      throw 'bad arguments: callback expected';
    }
    corridor = new Corridor(corridor, 'config');
    return ConfigManager.getConfig(function(config) {
      config.corridors = _.union(config.corridors, [corridor.name]);
      return ConfigManager.saveConfig(config, function(err) {
        if (err != null) {
          console.log(err);
        }
        return callback();
      });
    });
  };

  Api.deleteCorridor = function(corridor, callback) {
    if ((corridor == null) || typeof corridor !== 'string') {
      throw 'bad arguments: expected \'corridor\' <string>';
    }
    if (callback == null) {
      throw 'bad arguments: callback expected';
    }
    corridor = new Corridor(corridor, 'config');
    return ConfigManager.getConfig(function(config) {
      config.corridors = _.reject(config.corridors, function(item) {
        return item === corridor.name;
      });
      return ConfigManager.saveConfig(config, function(err) {
        if (err != null) {
          console.log(err);
        }
        return callback();
      });
    });
  };

  Api.getEvents = function(callback) {
    if (callback == null) {
      throw 'bad arguments';
    }
    return Api.connector.getEvents(callback);
  };

  Api.setEvent = function(callback, event) {
    if ((callback == null) || typeof (event != null ? event.seen : void 0) !== 'boolean' || typeof (event != null ? event.deleted : void 0) !== 'boolean') {
      throw 'bad arguments';
    }
    return Api.connector.setEvent(callback, event);
  };

  Api.getOverviewData = function(callback) {
    if (callback == null) {
      throw 'bad arguments';
    }
    return Api.connector.getOverviewData(callback);
  };

  Api.getHistory = function(callback, options) {
    if ((callback == null) || typeof (options != null ? options.app : void 0) !== 'string' || typeof (options != null ? options.corridor : void 0) !== 'string') {
      throw new Error('bad arguments');
    }
    return Api.connector.getHistory(callback, false, options);
  };

  Api.getTrend = function(callback, options) {
    if ((callback == null) || typeof (options != null ? options.app : void 0) !== 'string' || typeof (options != null ? options.corridor : void 0) !== 'string') {
      throw 'invalid params';
    }
    return Api.connector.getTrend(callback, false, options);
  };

  Api.getCalls = function(callback) {
    if (callback == null) {
      throw 'invalid params';
    }
    return Api.connector.getCalls(callback, false);
  };

  return Api;

})();

module.exports = Api;
